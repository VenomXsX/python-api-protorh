---
import { randomUUID } from 'crypto';
type Props = {
	label?: string;
} & astroHTML.JSX.SelectHTMLAttributes;

const { label, ...props } = Astro.props;
const uuid = randomUUID().toString();
---

<div>
	{label !== undefined && <label for={uuid}>{label}</label>}
	<select {...props} id={uuid}>
		<slot />
	</select>
</div>

<style>
	div {
		position: relative;
		list-style: none;
		display: grid;
		padding: 1px;
		padding-right: 1rem;
		background-color: #23262d;
		background-image: none;
		background-size: 400%;
		border-radius: 7px;
		background-position: 100%;
		transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
		box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
	}
	div:after {
		content: '>';
		font:
			17px 'Consolas',
			monospace;
		-webkit-transform: rotate(90deg);
		-moz-transform: rotate(90deg);
		-ms-transform: rotate(90deg);
		transform: rotate(90deg) translateX(calc(-50% + -3px));
		right: 0.5rem;
		top: 50%;
		position: absolute;
		pointer-events: none;
		opacity: 0.8;
	}
	label {
		padding: 0.5rem;
	}
	select {
		-webkit-appearance: none;
		-moz-appearance: none;
		appearance: none;
		width: calc(100% + 1rem);
		border: none;
		border-radius: 8px;
		color: white;
		background-color: #23262d;
		padding: 1rem;
		opacity: 0.8;
		border-top: 1px solid rgba(255, 255, 255, 0.1);
	}
	div:is(:focus, :focus-within) {
		background-position: 0;
		background-image: var(--accent-gradient);
	}
	div:is(:focus, :focus-within) h2 {
		color: rgb(var(--accent-light));
	}
</style>
