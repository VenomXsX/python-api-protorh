---
import Button from '../components/Button.astro';
import Code from '../components/Code.astro';
import Input from '../components/Input.astro';
import Select from '../components/Select.astro';
import Render from '../components/Render.astro';
import { api_url, maxAge } from '../lib/api';
import { f, useSession } from '../utils/helper';

const { token, user } = useSession(Astro);
// revalidate token
if (user !== null) {
	const { data } = await f({
		url: `${api_url}/revalidate`,
		token,
	});
	Astro.cookies.set('session', { token: data, user }, { maxAge });
}

type Queries =
	| 'getall'
	| 'getme'
	| 'getbyid'
	| 'create'
	| 'delete'
	| 'update'
	| 'password';

const q = Astro.url.searchParams.get('q') as Queries;

const tc = async (callback: (formData: FormData) => unknown) => {
	if (Astro.request.method !== 'POST') return;

	try {
		const formData = await Astro.request.formData();

		return callback(formData);
	} catch (error) {
		if (error instanceof Error) {
			console.error(error.message);
			return error.message;
		}
	}
};

const getOutput = async () => {
	switch (q) {
		case 'getall':
			return (await f({ url: `${api_url}/user` })).data;

		case 'getme':
			return (await f({ url: `${api_url}/user/me`, token })).data;

		case 'getbyid':
			return await tc(async (formData) => {
				const id = formData.get('id')?.toString();
				if (!id) return 'Please provide an ID';
				if (isNaN(Number(id))) return 'Please provide a valid number ID';

				return (
					await f({
						url: `${api_url}/user/${id}`,
						token,
					})
				).data;
			});

		case 'delete':
			return await tc(async (formData) => {
				const id = formData.get('id')?.toString();
				if (!id) return 'Please provide an ID';
				if (isNaN(Number(id))) return 'Please provide a valid number ID';

				return (
					await f({
						url: `${api_url}/user/delete/${id}`,
						method: 'DELETE',
					})
				).data;
			});

		case 'create':
			return await tc(async (formData) => {
				const email = formData.get('email')?.toString();
				const password = formData.get('password')?.toString();
				const confirm_pass = formData.get('confirm_pass')?.toString();
				const firstname = formData.get('firstname')?.toString();
				const lastname = formData.get('lastname')?.toString();
				const birthday_date = formData.get('birthday_date')?.toString();
				const address = formData.get('address')?.toString();
				const postal_code = formData.get('postal_code')?.toString();

				const body = {
					email,
					password,
					confirm_pass,
					firstname,
					lastname,
					birthday_date,
					address,
					postal_code,
				};

				for (const item of Object.values(body)) {
					if (!item || item === '') return 'Please fill all the fields';
				}

				if (password !== confirm_pass) return 'Both password does not match';

				return (
					await f({
						url: `${api_url}/user/create`,
						method: 'POST',
						contentType: 'application/json',
						body: JSON.stringify(body),
						token,
					})
				).data;
			});

		case 'update':
			return await tc(async (formData) => {
				const id = formData.get('id')?.toString();
				const email = formData.get('email')?.toString();
				const birthday_date = formData.get('birthday_date')?.toString();
				const address = formData.get('address')?.toString();
				const postal_code = formData.get('postal_code')?.toString();
				const meta = formData.get('meta')?.toString();

				const firstname = formData.get('firstname')?.toString();
				const lastname = formData.get('lastname')?.toString();
				const role = formData.get('role');

				const obj: any = {
					email,
					birthday_date,
					address,
					postal_code,
					meta,
				};

				if (user && user.role === 'admin') {
					obj['firstname'] = firstname;
					obj['lastname'] = lastname;
					obj['role'] = role;
				}

				// checks
				if (!id) return 'Please provide an ID';
				if (isNaN(Number(id))) return 'Please provide a valid number ID';

				// filter: remove all empty
				const body = Object.keys(obj).reduce((acc: any, key) => {
					if (obj[key] && obj[key] !== '') return { ...acc, [key]: obj[key] };
					return acc;
				}, {});

				return (
					await f({
						url: `${api_url}/user/update/${id}`,
						method: 'PATCH',
						contentType: 'application/json',
						body: JSON.stringify(body),
						token,
					})
				).data;
			});

		case 'password':
			return await tc(async (formData) => {
				const email = formData.get('email')?.toString();
				const password = formData.get('password')?.toString();
				const new_password = formData.get('new_password')?.toString();
				const repeat_new_password = formData
					.get('repeat_new_password')
					?.toString();

				const body = {
					email,
					password,
					new_password,
					repeat_new_password,
				};

				for (const item of Object.values(body)) {
					if (!item || item === '') return 'Please fill all the fields';
				}

				return (
					await f({
						url: `${api_url}/user/password`,
						method: 'PATCH',
						contentType: 'application/json',
						body: JSON.stringify(body),
					})
				).data;
			});

		default:
			return 'No output';
	}
};

const output = await getOutput();
---

<Render
	title="Users"
	back={{
		href: '/',
		title: 'Go back to home page',
	}}
>
	<h1 class="text-center">Users</h1>
	<Button href="/users">Reset</Button>
	<Code>{JSON.stringify(output, null, 2)}</Code>
	<div class="buttons">
		<Button href="/users?q=getall">Get All</Button>

		<Button href="/users?q=getme">Get me</Button>

		{
			user !== null && (
				<>
					<form action="/users?q=getbyid" method="post">
						<Input type="text" name="id" placeholder="ID*" />
						<Button type="submit">Get by id</Button>
					</form>
				</>
			)
		}

		<form action="/users?q=delete" method="post">
			<Input type="text" name="id" placeholder="ID*" />
			<Button type="submit">Delete by id</Button>
		</form>

		<form class="fields" action="/users?q=password" method="post">
			<label>Update password</label>
			<div>
				<Input type="text" name="email" placeholder="Email*" />
				<Input type="text" name="password" placeholder="Current password*" />
				<Input type="text" name="new_password" placeholder="New password*" />
				<Input
					type="text"
					name="repeat_new_password"
					placeholder="Repeat new password*"
				/>
				<Button type="submit">Submit</Button>
			</div>
		</form>

		<form class="fields" action="/users?q=create" method="post">
			<label>Create user</label>
			<div>
				<Input type="text" name="email" placeholder="Email*" />
				<Input type="text" name="password" placeholder="Password*" />
				<Input
					type="text"
					name="confirm_pass"
					placeholder="Confirm password*"
				/>
				<Input type="text" name="firstname" placeholder="Firstname*" />
				<Input type="text" name="lastname" placeholder="Lastname*" />
				<Input type="date" name="birthday_date" label="Birthday date*" />
				<Input type="text" name="address" placeholder="Address*" />
				<Input type="text" name="postal_code" placeholder="Postal code*" />
				<Button type="submit">Submit</Button>
			</div>
		</form>

		{
			user !== null && (
				<>
					<form class="fields" action="/users?q=update" method="post">
						<label>Update user</label>
						<div>
							<Input type="text" name="id" placeholder="User ID" />
							<Input type="text" name="email" placeholder="Email" />
							{user !== null && user.role === 'admin' && (
								<>
									<Input type="text" name="firstname" placeholder="Firstname" />
									<Input type="text" name="lastname" placeholder="Lastname" />
									<Select name="role">
										<option value="user">User</option>
										<option value="manager">Manager</option>
										<option value="admin">Admin</option>
									</Select>
								</>
							)}
							<Input
								type="date"
								name="birthday_date"
								placeholder="Birthday date"
							/>
							<Input type="text" name="address" placeholder="Address" />
							<Input type="text" name="postal_code" placeholder="Postal code" />
							<Input type="text" name="meta" placeholder="Meta" />
							<Button type="submit">Submit</Button>
						</div>
					</form>
				</>
			)
		}
	</div>
</Render>
