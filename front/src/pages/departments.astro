---
import Input from '../components/Input.astro';
import Render from '../components/Render.astro';
import Code from '../components/Code.astro';
import { api_url, maxAge } from '../lib/api';
import Button from '../components/Button.astro';
import { f, useSession } from '../utils/helper';

type Queries =
	| 'getall'
	| 'getbyid'
	| 'createDepartment'
	| 'manageUserDepartment';

const {
	isConnected,
	session: { token, email },
} = useSession(Astro);
// revalidate token
if (isConnected) {
	const { data } = await f({
		url: `${api_url}/revalidate`,
		token,
	});
	Astro.cookies.set('session', { token: data, email }, { maxAge });
}

const q = Astro.url.searchParams.get('q') as Queries;

const getOutput = async () => {
	switch (q) {
		case 'getall':
			return (await f({ url: `${api_url}/departments` })).data;

		case 'getbyid':
			if (Astro.request.method !== 'POST') break;
			try {
				const formData = await Astro.request.formData();
				const id = formData.get('id')?.toString();
				if (!id) return 'Please provide an ID';
				if (isNaN(Number(id))) return 'Please provide a valid number ID';

				return (
					await f({
						url: `${api_url}/departments/${id}/users`,
						token,
					})
				).data;
			} catch (error) {
				if (error instanceof Error) {
					console.error(error.message);
				}
			}
			break;

		case 'createDepartment':
			if (Astro.request.method !== 'POST') break;
			try {
				const formData = await Astro.request.formData();
				const name = formData.get('name')?.toString();
				if (!name) return 'Please provide a name';

				return (
					await f({
						url: `${api_url}/departments`,
						method: 'POST',
						contentType: 'application/json',
						body: JSON.stringify({ name }),
					})
				).data;
			} catch (error) {
				if (error instanceof Error) {
					console.error(error.message);
				}
			}
			break;

		case 'manageUserDepartment':
			if (Astro.request.method !== 'POST') break;

			try {
				const formData = await Astro.request.formData();
				const id = formData.get('id')?.toString();
				const userIds = formData.get('user_ids')?.toString();
				const method =
					(formData.has('add') && 'add') ||
					(formData.has('remove') && 'remove');

				// check empty
				if (!id || !userIds) return 'Please fill all the fields';
				// check if ID is number
				if (isNaN(Number(id))) return 'Please provide a valid number ID';

				const userIdArray = userIds.split(',');

				for (const id of userIdArray) {
					if (isNaN(Number(id))) return 'Please provide a valid number ID';
				}

				return (
					await f({
						url: `${api_url}/departments/${id}/users/${method}`,
						method: 'POST',
						contentType: 'application/json',
						body: JSON.stringify(userIdArray),
						token,
					})
				).data;
			} catch (error) {
				if (error instanceof Error) {
					console.error(error.message);
				}
			}

		default:
			return 'No output';
	}
};

const output = await getOutput();
---

<Render
	title="Departments"
	back={{
		href: '/',
		title: 'Go back to home page',
	}}
>
	<h1 class="text-center">Departments</h1>
	<div class="buttons">
		<Button href="/departments">Reset</Button>

		<Button href="/departments?q=getall">Get All</Button>

		<form action="/departments?q=createDepartment" method="post">
			<Input type="text" name="name" placeholder="Name" autocomplete="off" />
			<Button type="submit">Create department</Button>
		</form>

		{
			isConnected && (
				<>
					<form action="/departments?q=getbyid" method="post">
						<Input type="text" name="id" placeholder="ID" />
						<Button type="submit">Get assigned user to department</Button>
					</form>

					<form action="/departments?q=manageUserDepartment" method="post">
						<Input type="text" name="id" placeholder="Departtment id" />
						<Input
							type="text"
							name="user_ids"
							placeholder="User's ids (separate with comma ',')"
						/>
						<Button type="submit" name="add">
							Add user to department
						</Button>
					</form>

					<form action="/departments?q=manageUserDepartment" method="post">
						<Input type="text" name="id" placeholder="Departtment id" />
						<Input
							type="text"
							name="user_ids"
							placeholder="User's ids (separate with comma ',')"
						/>
						<Button type="submit" name="remove">
							Remove user from department
						</Button>
					</form>
				</>
			)
		}
	</div>
	<Code>{JSON.stringify(output, null, 2)}</Code>
</Render>

<style>
	.buttons {
		display: flex;
		flex-wrap: wrap;
		gap: 1rem;
	}
</style>
